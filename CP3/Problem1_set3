class CircularNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.head = None

    
    def insert_at_beginning(self, data):
        new_node = CircularNode(data)
        
        if not self.head:
            
            self.head = new_node
            new_node.next = self.head
        else:
            
            current = self.head
            while current.next != self.head:
                current = current.next
            current.next = new_node
            new_node.next = self.head
            self.head = new_node

    
    def delete_node(self, data):
        if not self.head:
            print("List is empty")
            return

       
        if self.head.data == data:
           
            if self.head.next == self.head:
                self.head = None
            else:
                
                current = self.head
                while current.next != self.head:
                    current = current.next
                current.next = self.head.next
                self.head = self.head.next
            return

       
        current = self.head
        while current.next != self.head and current.next.data != data:
            current = current.next
            
            
            
            
        if current.next.data == data:
            current.next = current.next.next
        else:
            print(f"Node with data {data} not found.")

    
    def display(self):
        if not self.head:
            print("List is empty")
            return

        current = self.head
        while True:
            print(current.data, end=" -> ")
            current = current.next
            if current == self.head:
                break
        print()


cll = CircularLinkedList()
cll.insert_at_beginning(10)
cll.insert_at_beginning(20)
cll.insert_at_beginning(30)
cll.display()  
cll.delete_node(20)
cll.display()  
