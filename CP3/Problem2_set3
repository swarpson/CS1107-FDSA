from collections import deque

class Graph:
    def __init__(self):
      
        self.adj_list = {}

 
    def add_vertex(self, vertex):
        if vertex not in self.adj_list:
            self.adj_list[vertex] = []


    def add_edge(self, vertex1, vertex2):
        if vertex1 not in self.adj_list:
            self.add_vertex(vertex1)
        if vertex2 not in self.adj_list:
            self.add_vertex(vertex2)
        
        self.adj_list[vertex1].append(vertex2)
        self.adj_list[vertex2].append(vertex1)

    
    def bfs(self, start_vertex):
        
        visited = set()

        queue = deque([start_vertex])

        visited.add(start_vertex)

        print(f"BFS Traversal starting from vertex {start_vertex}:")
        while queue:
           
            vertex = queue.popleft()
            print(vertex, end=" ")

            
            for neighbor in self.adj_list[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        print()

graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 2)
graph.add_edge(1, 3)
graph.add_edge(2, 4)
graph.bfs(0)  

